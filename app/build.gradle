plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.jetbrainsKotlin)
    alias(libs.plugins.ksp)
    alias(libs.plugins.dagger.hilt)
    alias(libs.plugins.google.services)
    alias(libs.plugins.firebase.appdistribution)
    alias(libs.plugins.firebase.crashlytics)
}

android {
    namespace 'com.jvrcoding.weatherapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.jvrcoding.weatherapp"
        minSdk 24
        targetSdk 34
        versionCode 7
        versionName "1.1.2"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def apiKey = System.getenv("API_KEY")

        if (apiKey == null) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())
            apiKey = properties.getProperty("api_key")
        }

        buildConfigField "String", "API_KEY", "\"${apiKey}\""
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            firebaseAppDistribution {
                artifactType="APK"
                groups="sample-group"
                releaseNotesFile="$rootDir/releasenotes.txt"
                serviceCredentialsFile = System.getenv("FIREBASE_SERVICE_CREDENTIALS") != null
                        ? project.file("$System.env.GITHUB_WORKSPACE/firebase-service-account.json")
                        : project.file("$rootDir/weatherapp-e6456-93d7def3f886.json")
            }
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            firebaseAppDistribution {
                artifactType="APK"
                groups="sample-group"
                releaseNotesFile="$rootDir/releasenotes.txt"
                serviceCredentialsFile="$rootDir/weatherapp-e6456-93d7def3f886.json"
            }
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.9'
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.startup.runtime
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    implementation libs.androidx.core.splashscreen

    //firebase
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.crashlytics
    implementation libs.firebase.analytics
    implementation libs.firebase.config.ktx
    implementation libs.firebase.messaging.ktx

    //compose
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.ui.tooling.preview
    implementation libs.androidx.compose.material3
    implementation libs.androidx.compose.material.icons.extended
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.hilt.navigation.compose
    implementation libs.androidx.constraintlayout.compose
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.compose.ui.test.junit4
    debugImplementation libs.androidx.compose.ui.tooling

    implementation libs.accompanist.swiperefresh

    //dagger
    implementation libs.hilt.android
    ksp libs.hilt.android.compiler

    //retrofit
    implementation libs.squareup.retrofit
    implementation libs.squareup.retrofit.converter.gson
    implementation libs.squareup.logging.interceptor

    // Room
    implementation libs.androidx.room.ktx
    ksp libs.androidx.room.compiler

    //bypass time
    coreLibraryDesugaring libs.desugar.jdk.libs

    //image loading
    implementation libs.coil.compose

    //datastore
    implementation libs.androidx.datastore.preferences

    // Local unit tests
    testImplementation libs.androidx.core
    testImplementation libs.junit
    testImplementation libs.androidx.core.testing
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.truth
    testImplementation libs.mockk
}